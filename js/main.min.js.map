{"version":3,"sources":["webpack://project/./js/main.js"],"names":["$","document","ready","observer","query","prefixes","wWidth","window","width","navState","$header","$nav","find","$parentLi","$parentLinks","children","$subMenu","isObserver","handleNavTouch","e","$item","target","$submenu","siblings","parent","hasClass","attr","removeClass","slideUp","addClass","slideDown","IntersectionObserverEntry","prototype","IntersectionObserver","entries","forEach","entry","isIntersecting","classList","add","unobserve","rootMargin","split","DocumentTouch","join","matchMedia","matches","doneResizing","func","wait","immediate","args","timeout","context","this","callNow","clearTimeout","setTimeout","apply","debounce","on","scrollTop","parseInt","css","height","disableScrolling","preventDefault","keyup","keyCode","which","filter","length","body","addEventListener","remove","event","key","each","i","el","observe"],"mappings":"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","file":"main.min.js","sourcesContent":["$(document).ready(() => {\n  let wWidth = $(window).width();\n  let navState = false;\n  const $header = $('.page-header');\n  const $nav = $header.find('.nav');\n  const $parentLi = $nav.find('.menu-item-has-children');\n  const $parentLinks = $parentLi.children('a');\n  const $subMenu = $parentLi.children('.sub-menu');\n  let isObserver = true;\n  let observer;\n  let isTouch;\n\n  if (\n    !('IntersectionObserver' in window) ||\n    !('IntersectionObserverEntry' in window) ||\n    !('isIntersecting' in window.IntersectionObserverEntry.prototype)\n  ) {\n    isObserver = false;\n    $('html').removeClass('is-observer');\n  }\n\n  if (isObserver) {\n    observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add('is-visible');\n            observer.unobserve(entry.target);\n          }\n        });\n      },\n      { rootMargin: '0px 0px -15% 0px' }\n    );\n  }\n\n  function isTouchDevice() {\n    const prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\n    const mq = (query) => {\n      return window.matchMedia(query).matches;\n    };\n\n    if (\n      'ontouchstart' in window ||\n      // eslint-disable-next-line no-undef\n      (window.DocumentTouch && document instanceof DocumentTouch)\n    ) {\n      return true;\n    }\n\n    // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n    // https://git.io/vznFH\n    const query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join(\n      ''\n    );\n    return mq(query);\n  }\n\n  if (isTouchDevice()) {\n    isTouch = true;\n    $('html').addClass('is-touch');\n  }\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  function debounce(func, wait, immediate, ...args) {\n    let timeout;\n    return function () {\n      const context = this;\n      const later = function () {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n\n  // function once(fn, context) {\n  //   var result;\n\n  //   return function() {\n  //     if (fn) {\n  //       result = fn.apply(context || this, arguments);\n  //       fn = null;\n  //     }\n\n  //     return result;\n  //   };\n  // }\n\n  // // Usage\n  // var canOnlyFireOnce = once(function() {\n  //   console.log('Fired!');\n  // });\n\n  function disableScrolling() {\n    if ($(document).height() > $(window).height()) {\n      const scrollTop = $('html').scrollTop()\n        ? $('html').scrollTop()\n        : $('body').scrollTop(); // Works for Chrome, Firefox, IE...\n      $('html').addClass('disable-scrolling').css('top', -scrollTop);\n    }\n  }\n\n  function enableScrolling() {\n    const scrollTop = parseInt($('html').css('top'), 10);\n    $('html').removeClass('disable-scrolling');\n    $('html,body').scrollTop(-scrollTop);\n  }\n\n  function updateNav() {\n    $header.removeClass('is-opened');\n    $parentLi.removeClass('is-active');\n    $parentLinks.attr('aria-expanded', 'false');\n\n    if (wWidth < 1280) {\n      $subMenu.slideUp();\n    } else {\n      $subMenu.show();\n    }\n  }\n\n  function handleNavTouch(e) {\n    const $item = $(e.target);\n    const $submenu = $item.siblings('.sub-menu');\n\n    if ($item.parent().hasClass('is-active')) {\n      $item.attr('aria-expanded', 'false').parent().removeClass('is-active');\n\n      if (wWidth < 1280) {\n        $submenu.slideUp();\n      }\n    } else {\n      $parentLi.removeClass('is-active');\n      $item.attr('aria-expanded', 'true').parent().addClass('is-active');\n\n      if (wWidth < 1280) {\n        $subMenu.slideUp();\n        $submenu.slideDown();\n      }\n    }\n  }\n\n  function bindEvents() {\n    $('.hamburger').on('click', () => {\n      if (navState) {\n        $header.removeClass('is-opened');\n        enableScrolling();\n      } else {\n        $header.addClass('is-opened');\n        disableScrolling();\n      }\n\n      navState = !navState;\n    });\n\n    $parentLinks.on('touchend', (e) => {\n      e.preventDefault();\n      handleNavTouch(e);\n    });\n\n    /* Navigation with tabbing */\n    $(window).keyup((e) => {\n      const code = e.keyCode ? e.keyCode : e.which;\n\n      if (code === 9) {\n        if ($parentLinks.filter(':focus').length) {\n          handleNavTouch(e);\n        } else if ($nav.find('>li>a:focus').length) {\n          $parentLi.removeClass('is-active');\n\n          if (wWidth < 1280) {\n            $parentLi.children('.sub-menu').slideUp();\n          }\n        }\n      }\n    });\n\n    // FOCUS STYLING\n    // Let the document know when the mouse is being used\n    document.body.addEventListener('mousedown', () => {\n      document.body.classList.remove('is-tab');\n    });\n\n    // Re-enable focus styling when Tab is pressed\n    document.body.addEventListener('keydown', (event) => {\n      if (event.key === 'Tab') {\n        document.body.classList.add('is-tab');\n      }\n    });\n  }\n\n  const doneResizing = debounce(() => {\n    const width = $(window).width();\n\n    if (wWidth !== width) {\n      wWidth = width;\n    }\n  }, 500);\n\n  /* FUNCTION CALLS */\n  /* ============= */\n  bindEvents();\n\n  if (isObserver) {\n    $('.js-visibility').each((i, el) => {\n      observer.observe(el);\n    });\n  }\n\n  $(window).on('scroll', () => {});\n  $(window).on('load', () => {});\n  $(window).on('resize', doneResizing);\n});\n"],"sourceRoot":""}